<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="xrechnung-testsuite" default="compile-test">

  <property name="dist.dir" location="${basedir}/dist" />
  <property name="lib.dir" location="${basedir}/lib" />
  <property name="src.dir" location="${basedir}/src" />
  <property name="src.doc.dir" location="${basedir}/src/doc" />
  <property name="instance.dir" location="${basedir}/instances" />
  <property name="build.dir" location="${basedir}/build" />
  <property name="download.dir" location="${build.dir}/download" />

  <!-- the source of test instances -->
  <property name="test.src.dir" location="${src.dir}/test" />
  <property name="test.src.technical.dir"
    location="${test.src.dir}/technical-cases" />
  <property name="test.src.business.dir"
    location="${test.src.dir}/business-cases" />
  <!-- test instances in the build directory-->
  <property name="test.build.dir" location="${build.dir}/instances" />
  <property name="test.build.technical.dir"
    location="${test.build.dir}/technical-cases" />
  
  <property name="test.build.standard.dir"
    location="${test.build.dir}/standard" />
  <property name="test.build.extension.dir"
    location="${test.build.dir}/extension" />
  <property name="test.build.generated.dir"
    location="${test.build.dir}/generated" />
  <property name="reports.dir" location="${build.dir}/reports" />

  <property name="testsuite.version.date" value="2022-04-31-SNAPSHOT" />

  <property name="xrechnung.version.full" value="2.2.0" />

  <!-- For testing testsuite -->
  <property name="xmute.jar" value="xml-mutate-${xmute.version.full}.jar"/>

  <!--  this must be a direct absolut path  --> 
  <property name="validator.configuration.resources.dir" value="${validator.configuration.project.dir}/build/resources"/> 
  <property name="validator.dir" value="${validator.configuration.project.dir}/lib"/>
  <property name="validator.version.full" value="1.4.2"/>
  <property name="validator.jar" value="validationtool-${validator.version.full}-standalone.jar"/>
  
  <property name="dist.name"
    value="xrechnung-${xrechnung.version.full}-testsuite-${testsuite.version.date}" />

  <target name="init"
    description="Initializes build directory structure and ISO timestamp">
    <!-- Create timestamps -->
    <tstamp>
      <format property="build.date" pattern="yyyy-MM-dd" />
    </tstamp>

    <echo>Build date: ${build.date}</echo>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build.dir}" />
    <mkdir dir="${download.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${reports.dir}" />
  </target>


  
  <target name="provide-validator-configuration">

    <fail unless="validator.configuration.project.dir"
      message="Set validator.configuration.project.dir property e.g. at command line" />
    
    

    <echo message="Checking ${validator.configuration.resources.dir}" />



    <fail unless="validator.configuration.resources.dir"
      message="Set validator.configuration.resources.dir in properties file" />

    <fail
      message="Directory does not exist: ${validator.configuration.resources.dir}">
      <condition>
        <not>
          <available file="${validator.configuration.resources.dir}" type="dir"
           />
        </not>
      </condition>
    </fail>

    <fail message="Validator does not exist: ${validator.jar}">
      <condition>
        <not>
          <available file="${validator.dir}/${validator.jar}" type="file" />
        </not>
      </condition>
    </fail>

  </target>


  <target name="compile-test" depends="init"
    description="Compiling test instances from sources">
    <!-- Currently we just copy, but later we will transform etc. before testing -->
    <copy todir="${test.build.dir}">
      <fileset dir="${test.src.business.dir}" />
      
    </copy>
    <basename property="technical.dirname" file="${test.src.technical.dir}"/>
    <copy todir="${test.build.dir}">
      <fileset dir="${test.src.dir}" >
        <include name="${technical.dirname}"/>
      </fileset>
    </copy>
  </target>


  <target name="compile-doc" depends="init"
    description="Compiling documentation from sources">
    <!-- Currently we just copy, but later we will transform etc. before testing -->
    <copy todir="${build.dir}" verbose="true">
      <fileset dir="${src.doc.dir}" />
    </copy>
  </target>
  
  <target name="compile" depends="compile-test, compile-doc"
    description="Compiling Testsuite from sources">
  </target>

  <target name="validator-standard-business-case-test"
    depends="compile-test, provide-validator-configuration"
    description="Testsuite business case validation"
   >
    <echo>Creating validation reports for standard business cases ...</echo>
    <java jar="${validator.dir}/${validator.jar}" failonerror="yes" fork="yes"
      dir="${basedir}">
      <arg value="-s" />
      <arg value="${validator.configuration.project.dir}/build/scenarios.xml" />
      <arg value="-r" />
      <arg value="${validator.configuration.project.dir}/build" />
      <arg value="-h" />
      <arg value="-o" />
      <arg value="${reports.dir}" />
      <arg value="${test.build.standard.dir}" />
    </java>
  </target>

  <target name="validator-extension-business-case-test"
    depends="compile-test, provide-validator-configuration"
    description="Testsuite business case validation"
   >
    <echo>Creating validation reports for extension business cases ...</echo>
    <java jar="${validator.dir}/${validator.jar}" failonerror="yes" fork="yes"
      dir="${basedir}">
      <arg value="-s" />
      <arg value="${validator.configuration.project.dir}/build/scenarios.xml" />

      <arg value="-r" />
      <arg value="${validator.configuration.project.dir}/build" />
      <arg value="-h" />
      <arg value="-o" />
      <arg value="${reports.dir}" />
      <arg value="${test.build.extension.dir}" />
    </java>
  </target>

  <target name="validator-technical-test"
    depends="compile-test, provide-validator-configuration"
    description="Testsuite technical validation with Validator XRechnung Configuration"
   >
    <echo>Creating validation reports for technical cases ...</echo>
    <java jar="${validator.dir}/${validator.jar}" failonerror="yes" fork="yes"
      dir="${basedir}">
      <arg value="-s" />
      <arg value="${validator.configuration.project.dir}/build/scenarios.xml" />

      <arg value="-r" />
      <arg value="${validator.configuration.project.dir}/build" />
      <arg value="-h" />
      <arg value="-o" />
      <arg value="${reports.dir}" />
      <arg value="${test.build.technical.dir}" />
    </java>
  </target>

  <target name="validator-test"
    depends="validator-extension-business-case-test,validator-standard-business-case-test">

  </target>

  <target name="retrieve-xmute" depends="init">
    <fail unless="xmute.download.url.prefix"
      message="Property xmute.download.url.prefix must exist for this target to work" />
    <fail unless="xmute.version.full"
      message="Property xmute.version.full must exist for this target to work" />
    <get src="${xmute.download.url.prefix}/target/xml-mutate-${xmute.version.full}.jar"
      dest="${lib.dir}/${xmute.jar}" verbose="true" skipexisting="false"
      usetimestamp="true" />
  </target>

  <propertyset id="proxy.properties">
    <!--  	Select the properties whose name starts with the given string. -->
    <propertyref prefix="java.net.useSystemProxies" />
    <propertyref prefix="http." />
    <propertyref prefix="https." />
  </propertyset>
 
 
  <target name="mutate"
    depends="compile-test,retrieve-xmute, provide-validator-configuration"
    description="Unit TestSchematron Rules wit XML-Mutate"
   >
    <fail unless="xmute.jar" message="xmute.jar has to be set"></fail>
    <echo>Testing Schematron rules ...</echo>
    <java jar="${lib.dir}/${xmute.jar}" failonerror="true" fork="true"
      dir="${basedir}">
      <!-- Proxy required by genericode mutator 
      <syspropertyset refid="proxy.properties" />
-->
      <arg value="--schematron" />
      <arg
        value="cenubl=${validator.configuration.resources.dir}/ubl/2.1/xsl/EN16931-UBL-validation.xsl" />
      <arg value="--schematron" />
      <arg
        value="xrinv=${validator.configuration.resources.dir}/xrechnung/${xrechnung.version.full}/xsl/XRechnung-UBL-validation-Invoice.xsl" />
      <!-- cencii:  for CEN UN/CEFACT CII rules
xrinv: Â´ for XRechnung UBL Invoice
xrcn:    for XRechnung UBL Credit Note
xrcii:   for XRechnung UN/CEFACT CII-->
      <arg value="--target ${test.build.generated.dir}" />
      <arg value="${test.build.technical.dir}/" />
    </java>
  </target>


  <target name="test" depends="compile-test,mutate,validator-test"
    description="Perform all tests">
    <echo message="Executing all tests" />
  </target>


  <target name="dist-only" description="Create distribution zip for release">
    <zip destfile="${dist.dir}/${dist.name}.zip">
      
      <zipfileset dir="${test.build.dir}" prefix="instances" />
      <zipfileset dir="doc" prefix="doc"/>
      <!-- Project documents-->
      <fileset dir="${basedir}">
        <include name="README.md" />
        <include name="CHANGELOG.md" />
        
      </fileset>

      <!-- Content documents-->
      <fileset dir="${build.dir}">
        <include name="test-overview.md" />
      </fileset>
      
    </zip>
  </target>


  <target name="dist" depends="test, compile-doc, dist-only"
    description="Create distribution zip for release">
    <echo message="Created distribution" />

  </target>




  <target name="clean">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build.dir}" verbose="true" includeEmptyDirs="true" />
    <delete dir="${dist.dir}" />
  </target>
</project>
